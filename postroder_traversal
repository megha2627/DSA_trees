Given the root of a binary tree, return the postorder traversal of its nodes' values.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
/*class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
         List<Integer> result = new ArrayList<>();
        if (root == null) {
            return result;
        }

        // Using a single stack for postorder traversal
        Stack<TreeNode> stack = new Stack<>();
        TreeNode current = root;
        TreeNode lastVisited = null;

        while (!stack.isEmpty() || current != null) {
            if (current != null) {
                // Push current node to the stack and move to its left child
                stack.push(current);
                current = current.left;
            } else {
                // Peek the node from the stack
                TreeNode peekNode = stack.peek();

                // If the right child exists and has not been visited yet, traverse the right child
                if (peekNode.right != null && lastVisited != peekNode.right) {
                    current = peekNode.right;
                } else {
                    // Otherwise, visit the node and mark it as visited
                    result.add(peekNode.val);
                    lastVisited = stack.pop();
                }
            }
        }
        return result;
        
    }
}*/
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null) return result; // Empty tree check
        
        Stack<TreeNode> stack1 = new Stack<>();
        Stack<TreeNode> stack2 = new Stack<>();
        
        stack1.push(root);  // Push root to first stack
        
        while (!stack1.isEmpty()) {
            TreeNode node = stack1.pop(); // Pop from first stack
            stack2.push(node);            // Push to second stack
            
            // Push left and right children of the popped node to stack1
            if (node.left != null) {
                stack1.push(node.left);
            }
            if (node.right != null) {
                stack1.push(node.right);
            }
        }
        
        // Second stack contains nodes in reverse postorder, so pop them to get the correct order
        while (!stack2.isEmpty()) {
            result.add(stack2.pop().val);
        }
        
        return result;  // Return the postorder traversal
    }
}
