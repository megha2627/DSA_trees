Given a binary tree, return an array where elements represent the bottom view of the binary tree from left to right.

Note: If there are multiple bottom-most nodes for a horizontal distance from the root, then the latter one in the level traversal is considered. For example, in the below diagram, 3 and 4 are both the bottommost nodes at a horizontal distance of 0, here 4 will be considered.




//User function Template for Java


class Solution
{
   
    
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        // Code here
        Map<Integer,Integer> mpp = new TreeMap<>();
        Queue<Pair> q=new ArrayDeque<>();
        q.offer(new Pair(0,root));
        while(!q.isEmpty()){
            Pair curr = q.poll();
            mpp.put(curr.hd,curr.node.data);
            if(curr.node.left!=null){
                q.offer(new Pair(curr.hd-1,curr.node.left));
            }
            if(curr.node.right!=null){
                q.offer(new Pair(curr.hd+1,curr.node.right));
            }
        }
        ArrayList<Integer> ans = new ArrayList<>();
        for(Map.Entry<Integer,Integer> entry: mpp.entrySet()){
            ans.add(entry.getValue());
        }
        return ans;
    }
     static class Pair{
        int hd;
        Node node;
        Pair(int hd,Node node){
        this.hd=hd;
        this.node=node;
        }
     }
    
}