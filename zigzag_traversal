Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List <List<Integer>> a1 = new ArrayList<>();
        Queue <TreeNode> q = new LinkedList<>();
        q.add(root);
        int count=0;
         int c=0;

        

        while(! q.isEmpty())
        {
            List <Integer> a = new ArrayList<>();
            count=q.size();
           
            for(int i=0;i<count;i++){
                 TreeNode n = q.remove();
                if(n!=null){
                    if(n.left != null) q.add(n.left);

                    if(n.right != null) q.add(n.right);
                     a.add(n.val);

                } 
           
                

               

            }
            if(a.size()>0){
                if(c%2!=0){
                    Collections.reverse(a);

                }
                

                a1.add(a);

            }
            c++;
            
           

            
            
        }
        return a1;
        
    }
}